<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on zoux的博客</title>
    <link>https://zoux86.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on zoux的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Dec 2019 01:31:20 +0800</lastBuildDate>
    
	<atom:link href="https://zoux86.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;指针你要了解的事</title>
      <link>https://zoux86.github.io/post/2019-12-06-c&#43;&#43;%E6%8C%87%E9%92%88%E4%BD%A0%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%8B/</link>
      <pubDate>Fri, 06 Dec 2019 01:31:20 +0800</pubDate>
      
      <guid>https://zoux86.github.io/post/2019-12-06-c&#43;&#43;%E6%8C%87%E9%92%88%E4%BD%A0%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%8B/</guid>
      <description>指针和引用的区别 指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用仅是个别名； 引用使用时无需解引用(*)，指针需要解引用； 引用只能在定义时被初始化一次，之后不可变；指针可变； 引用没有 const，指针有 const； 引用不能为空，指针可以为空； “sizeo</description>
    </item>
    
    <item>
      <title>一道非常有意思的C&#43;&#43;面试题</title>
      <link>https://zoux86.github.io/post/2019-12-05-%E4%B8%80%E9%81%93%E9%9D%9E%E5%B8%B8%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84c&#43;&#43;%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Thu, 05 Dec 2019 00:31:20 +0800</pubDate>
      
      <guid>https://zoux86.github.io/post/2019-12-05-%E4%B8%80%E9%81%93%E9%9D%9E%E5%B8%B8%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84c&#43;&#43;%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>一道非常有意思的C++题目，描述如下： 已知一个类的结构，但是它所有的成员变量是私有的，有get方法，但是没有set方法，请问如何给成员变量赋值。 答案 #include &amp;lt;iostream&amp;gt; using namespace std; class A{ private: int b; public: int getB(){ return b; } }; int main(){ A *a = new A; int *p = (int *)a; *p = 1; cout&amp;lt;&amp;lt;a-&amp;gt;getB()&amp;lt;&amp;lt;endl; } 这道题的关键在于，要了解C++实例的内存分布。实现主要是下面两步</description>
    </item>
    
    <item>
      <title>C&#43;&#43;类对象的内存分布</title>
      <link>https://zoux86.github.io/post/2019-12-04-c&#43;&#43;%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link>
      <pubDate>Wed, 04 Dec 2019 20:31:20 +0800</pubDate>
      
      <guid>https://zoux86.github.io/post/2019-12-04-c&#43;&#43;%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid>
      <description>C++中类初始化成一个对象之后，该对象实例在内存中是如何分布的呢？ 空类情况 如果实例化一个空类，这个对象会在内存中占用1个字节。目的只是标识一下，这是一个类实例（因为不占的话，就和空数据没什么区别）。 含基本数据，不含函数的情况 #include &amp;lt;iostream&amp;gt; using namespace std; class A{ char a; int b; char c; }; class B{ char a; char c; int b; }; int main(){ cout&amp;lt;&amp;lt;sizeof(A)&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;sizeof(B)&amp;lt;&amp;lt;endl; }</description>
    </item>
    
    <item>
      <title>C&#43;&#43;代码的一生</title>
      <link>https://zoux86.github.io/post/2019-11-27-c&#43;&#43;%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%80%E7%94%9F/</link>
      <pubDate>Thu, 28 Nov 2019 00:31:20 +0800</pubDate>
      
      <guid>https://zoux86.github.io/post/2019-11-27-c&#43;&#43;%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%80%E7%94%9F/</guid>
      <description>目录 c++代码变成可执行文件 （1）预处理过程 （2）编译过程 （3）汇编过程 （4）链接过程 （5）目标文件 （6）静态链接和动态链接 可执行文件变成进程 正文 一个c++程序，从.c文件，变成二进制可执行文件，会经历上述四个过程。 预处理阶段：对源代码文件中文件包含关系（头文件）、预编译语句（宏</description>
    </item>
    
  </channel>
</rss>